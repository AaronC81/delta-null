; set built-in LED to output
.put r1, 0xF010
.put r2, 0x0001
write r1, r2

; r0 is always toggle
.put r0, toggle

main:
    .put r2, dot
    .put r3, dash

    call r2
    call r2
    call r2
    call r3
    call r3
    call r3
    call r2
    call r2
    call r2

    .put r4, delay
    call r4
    call r4
    call r4
    call r4
    call r4
    call r4

    jmpoff main/offset

; flashes a dot - assumes LED is off when called
; trashes r4, r5, r6, r7
dot:
    movso r5, rp
    .put r4, delay
    
    call r0
    call r4
    call r0
    call r4

    movsi rp, r5
    ret

; flashes a dash - assumes LED is off when called
; trashes r4, r5, r6, r7
dash:
    movso r5, rp
    .put r4, delay
    
    call r0
    call r4
    call r4
    call r4
    call r0
    call r4
    call r4
    call r4

    movsi rp, r5
    ret

; delays one time unit
; trashes r6 and r7
delay:
    ; busy-waits for 0xFFFF cycles
    .put r6, 0xFFFF ; r6 = counter
    loop:
        dec r6
        eqz r6
        inv
        cjmpoff loop/offset
    ret

; toggles the LED
; trashes r6 and r7
toggle:
    .put r6, 0xF012
    read r7, r6
    not r7
    write r6, r7
    
    ret
